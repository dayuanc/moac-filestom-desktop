#!/usr/bin/env node

/*
 * Example program to use the Chain3 RPC commands
 * 
*/

var Chain3 = require('../index.js');
var chain3 = new Chain3();
var fs = require('fs');
var stream = fs.createWriteStream("test.csv");
// stream.once('open', function(fd) {
//   stream.write("My, first, row\n");
//   stream.write("My second, row\n");
//   stream.end();
// });

chain3.setProvider(new chain3.providers.HttpProvider('http://localhost:8545'));


if (!chain3.isConnected()){
    console.log("Chain3 RPC is not connected!");
    return;
}


console.log("Check block number\n=========================================\n");
var latestBlock = chain3.mc.blockNumber;

console.log("net1:", chain3.net.peerCount);
console.log("net2:", chain3.net.listening);
// console.log("getVNODE:", chain3.net.getVnodes());
for(var i = latestBlock - 500; i < latestBlock; i++){
    var blockinfo = chain3.mc.getBlock(i);
    // console.log(blockinfo);
    var outstr = i.toString() + "," + blockinfo.miner.toString() + ','+blockinfo.extraData.toString()+','+blockinfo.timestamp;
      // console.log(i, ",difficulty,",blockinfo.difficulty.toString(),",", blockinfo.totalDifficulty.toString(),",",blockinfo.transactions.length);//
      console.log(outstr);
  }

// console.log("VNODE:", chain3.vnode.address);
return;
console.log("total block:", latestBlock);
console.log("VNODE:", chain3.vnode.address);
return;
chain3.vnode.address(function(err, res) {
        if (!err){
            
            console.log("Succeed!: ", res);
            return res;
        }else{
            console.log("Chain3 error:", err.message);
            // response.success = false;
            // response.error = err.message;
            return err.message;
        }
        console.log("Shouldn't come here")
});
return;
console.log(chain3.net.peerCount);
console.log(chain3.net.getVnodes());
return;
// var coinbase = chain3.mc.getBlock(0).difficulty.toString();//coinbase;661081
// console.log(coinbase);

for(var i = 57220; i < 57245; i++){
    var blockinfo = chain3.mc.getBlock(i);
    // console.log(blockinfo);
    var outstr = i.toString() + "," + blockinfo.difficulty.toString() + ','+blockinfo.totalDifficulty.toString()+','+blockinfo.transactions.length+','+blockinfo.timestamp;
      // console.log(i, ",difficulty,",blockinfo.difficulty.toString(),",", blockinfo.totalDifficulty.toString(),",",blockinfo.transactions.length);//
      console.log(outstr);
  }

return;

stream.once('open', function(fd) {
for(var i = 0; i < latestBlock; i=i+360){
    var blockinfo = chain3.mc.getBlock(i);
    var outstr = i.toString() + "," + blockinfo.difficulty.toString() + ','+blockinfo.totalDifficulty.toString()+','+blockinfo.transactions.length+','+blockinfo.timestamp;
      // console.log(i, ",difficulty,",blockinfo.difficulty.toString(),",", blockinfo.totalDifficulty.toString(),",",blockinfo.transactions.length);//
      console.log(outstr);
      stream.write(outstr+"\n");
  }
stream.end();
});
return;
var balance = chain3.mc.getBalance(coinbase);
console.log(balance.toString(10));
console.log(chain3.fromSha(balance.toString(),'mc'), 'mc');
console.log(chain3.fromSha(balance.toString(),'Gsha'), 'Gsha');

var value = chain3.fromSha('21000000000000', 'Gsha');
console.log(value);

console.log("Display network info\n=========================================\n");
console.log(chain3.version.network);
console.log(chain3.version.moac);
console.log(chain3.version.api);
console.log(chain3.version.node);

chain3.version.getMoac(function(err, res) {
        if (!err){
            
            console.log("Succeed!: ", res);
            return res;
        }else{
            console.log("Chain3 error:", err.message);
            // response.success = false;
            // response.error = err.message;
            return err.message;
        }
    
    // console.log("Get response from MOAC node in the feedback function!")
 res.send(response);
});

chain3.version.getNode(function(err, res) {
        if (!err){
            
            console.log("Succeed!: ", res);
            return res;
        }else{
            console.log("Chain3 error:", err.message);
            // response.success = false;
            // response.error = err.message;
            return err.message;
        }
    
    // console.log("Get response from MOAC node in the feedback function!")
        // res.send(response);
});

chain3.version.getMoac(function(err, res) {
        if (!err){
            
            console.log("Succeed!: ", res);
            return res;
        }else{
            console.log("Chain3 error:", err.message);
            // response.success = false;
            // response.error = err.message;
            return err.message;
        }
    
    // console.log("Get response from MOAC node in the feedback function!")
        // res.send(response);
});

chain3.version.getNetwork(function(err, res) {
        if (!err){
            
            console.log("Succeed!: ", res);
            return res;
        }else{
            console.log("Chain3 error:", err.message);
            // response.success = false;
            // response.error = err.message;
            return err.message;
        }
    
    // console.log("Get response from MOAC node in the feedback function!")
        // res.send(response);
});


console.log("is mining?", chain3.mc.mining);


var accts = chain3.mc.accounts;
console.log("Total accounts:", accts.length);

return;

