/*
 * Generate a transaction for mc transfer
 * in the MOAC test network
 * for testing MOAC wallet server
 * Test conditions:
 * 1. a pair of address/private key for testing, address need to have some balances.
 *    need to update the transaction nonce after each TX.
 * 2. an address to send to.
 * 
*/
//library used to compare two results.
var chai = require('chai');
var assert = chai.assert;

//libraries to generate the Tx

//MOAC chain3 lib
var Chain3 = require('../index.js');
var chain3 = new Chain3();


//test accounts
//Need to add the addr and private key
var taccts = [{
  // "addr": "0x7312F4B8A4457a36827f185325Fd6B66a3f8BB8B", 
  // "key": "c75a5f85ef779dcf95c651612efb3c3b9a6dfafb1bb5375905454d9fc8be8a6b"
  "addr": "0x7312F4B8A4457a36827f185325Fd6B66a3f8BB8B", 
  "key": "0xb8a9c05beeedb25df85f8d641538cbffedf67216048de9c678ee26260eb91952"
},{
  "addr": "0xD814F2ac2c4cA49b33066582E4e97EBae02F2aB9", 
  "key": ""
}];

/*
 * value - default is in MC, 
 * in Sha, 1 mc = 1e+18 Sha
*/
function sendTx(src, des, chainid, value){

var txcount = 0;//chain3.mc.getTransactionCount(src["addr"]);

console.log("TX count:", txcount);

    // var rawTx = {
    //   from: src.addr,
    //   nonce: chain3.intToHex(txcount),
    //   // 1 gwei
    //   gasPrice: chain3.intToHex(2000000000),//chain3.intToHex(chain3.mc.gasPrice),//chain3.intToHex(400000000),
    //   gasLimit: chain3.intToHex(21000),
    //   to: '0xD814F2ac2c4cA49b33066582E4e97EBae02F2aB9',//des.addr, 
    //   value: chain3.intToHex(chain3.toSha(value, 'mc')), 
    //   data: '0x',
    //   chainId: chainid
    // }
  var rawTx = { from: '0x7312F4B8A4457a36827f185325Fd6B66a3f8BB8B',
  nonce: '0x4a',
  gasPrice: '0x77359400',
  gasLimit: '0x4c4b40',
  to: '0xf1f5b7a35dff6400af7ab3ea54e4e637059ef909',
  value: '0x2386f26fc10000',
  data: '0x00',
  chainId: '0x65',
  shardingFlag: '0x0',
  systemContract: '0x',
  via: '0x' };
  
// rawTx = {"nonce":"0x00","gasPrice":"0x14","gasLimit":"0x5208","to":"0xf1f5b7a35dff6400af7ab3ea54e4e637059ef909","value":"0x0de0b6b3a7640000","data":"0x","chainId":"0x65","via":"0x","systemContract":"0x","shardingFlag":"0x"};

console.log("Raw:", rawTx);
    var cmd1 = chain3.signTransaction(rawTx, src["key"]);

console.log("Signed cmd:", cmd1);
var cmd2 = "0xf86f4a808477359400834c4b4094f1f5b7a35dff6400af7ab3ea54e4e637059ef909872386f26fc1000000808081eea02ba57c4790d9bcd26a6ef4db1945dea63129cfc741ce9ef0e2114416e83ccf90a07a1cd6218d895cc71fbcae2fd10dd00792469c4c20d56ebf524ab6f6f36435e4";
assert.equal(cmd1, cmd2);
return;
    chain3.mc.sendRawTransaction(cmd1, function(err, hash) {
        if (!err){
            console.log("Succeed!: ", hash);
            return hash;
        }else{
            console.log("Chain3 error:", err.message);
            return err.message;
        }
    
    console.log("Get response from MOAC node in the feedback function!")
        // res.send(response);
    });

}

/*
 * display the account balance value in mc
 * in Sha, 1 mc = 1e+18 Sha
*/
function checkBal(inadd){
  var outval = chain3.mc.getBalance(inadd);
  //check input address
  return chain3.fromSha(outval.toString(),'mc');
}



//Set up the server to the MOAC node
// chain3.setProvider(new chain3.providers.HttpProvider('http://localhost:8545'));

// for (i = 0; i < taccts.length; i ++)
//   console.log("Acct[",i,"]:",taccts[i].addr, chain3.mc.getTransactionCount(taccts[i].addr), checkBal(taccts[i].addr));

//Call the function, note the input value is in 'mc'
var src = taccts[0];
var des = taccts[1];

// console.log(chain3.mc.gasPrice);
// return;
//Send the vaue in mc
//1 mc = 1e+18 Sha
//1 xiao = 1e+9 Xiao

//The sign of the transaction requires the correct network id
var networkid = 101;//chain3.version.network;
console.log("networ id", networkid);

sendTx(src, des, networkid, 1);

/*

            var r2 = "0xf149808477359400834c4b4094d814f2ac2c4ca49b33066582e4e97ebae02f2ab988115dd030eb1698000080808201018080"
                      0xf149808477359400834c4b4094d814f2ac2c4ca49b33066582e4e97ebae02f2ab988115dd030eb1698000000808201018080
            console.log("r1:", r1);
            for(var i = 0; i < r1.length; i++){
if (r1[i] != r2[i])
  console.log(i,":",r1[i]," vs ", r2[i])
  }
  */

return;



